#!/bin/bash

set -x

usage() {
    echo "MakeRelease: [options]"
    echo "     --workspace - Specify an alternate workspace"
    echo "     --target XXX - Specify the target triplet to build"
    echo "     --date XXX - Specify a date, which becomes part of the release name"
    echo "     --toolchainconfig XXX - [Optional] Explicitly define which toolchain"
    echo "                             to build, e.g., 'default', 'gcc5', 'gcc6'.  "
    echo "                             If not specified, 'default' is the default"
    echo "     --fileserver XXX - Specify the fileserver for tarballs"
    echo "     --manifest XXX - Optionally use a manifest as input"
    echo "     --glibc XXX - Specify Glibc version to build"
    echo "     --gcc XXX - Specify GCC version to build"
    echo "     --binutils XXX - Specify Binutils version to build"
    echo "     --help"
    exit
}

# Jenkins may run only using environment variables, a user needs to always
# supply some command line arguments.
if test $# -eq 0 -a x"${JENKINS_SERVER_COOKIE}" = x; then
    usage
fi

# Set defaults
if test x"${debug}" = x"true"; then
    export CONFIG_SHELL="/bin/bash -x"
else
    export CONFIG_SHELL="/bin/bash"
fi
target=""
fileserver="148.251.136.42"
extra=
toolchain_config=""
user_workspace="${WORKSPACE:-/home/${USER:-buildslave}/workspace}"

OPTS="`getopt -o t:f:d:w:m:l:g:u:h -l target:,date:,fileserver:,workspace:,toolchainconfig:,manifest:,glibc:,gcc:,binutils:,help`"
while test $# -gt 0; do
    case $1 in
	-w|--workspace) user_workspace=$2 ;;
	-t|--target) target=$2 ;;
	-d|--date) date=$2 ;;
	--toolchainconfig) toolchain_config=$2 ;;
        -f|--fileserver) fileserver=$2 ;;
        -m|--manifest) manifest_src=$2 ;;
        -l|--glibc) glibc_src=$2 ;;
        -g|--gcc) gcc_src=$2 ;;
        -u|--binutils) binutils_src=$2 ;;
        -h|--help) usage ;;
	--) break ;;
    esac
    shift
done

if test x"${target}" != x"native" -a x"${target}" != x; then
    platform="--target ${target}"
fi

shared="/home/buildslave/workspace/shared/"
abe_dir="$(dirname $0)/.."
user_snapshots="${user_workspace}/snapshots"

if test -e ${user_workspace}; then
    cat << EOF > ${user_workspace}/BUILD-INFO.txt
Format-Version: 0.5

Files-Pattern: *
License-Type: open
EOF
fi

# Create a build directory
if test ! -d ${user_workspace}/_build; then
    mkdir -p ${user_workspace}/_build
else
    rm -fr ${user_workspace}/_build/*
fi

# By default, always update all sources
update=""

if test x"${toolchain_config}" != x"" \
	-a x"${toolchain_config}" != x"default"; then
    extra="${extra} --extraconfigdir $abe_dir/config/${toolchain_config}"
fi

guess="`${abe_dir}/config.guess`"
machine="`gcc -dumpmachine`"
if test x"${guess}" != x"${machine}"; then
    arch="`echo ${machine} | cut -d '-' -f 1`"
    CONFIG_SHELL="setarch ${arch} ${CONFIG_SHELL}"
fi

# Use the newly created build directory
cd ${user_workspace}/_build

if ! test -e host.conf; then
  $CONFIG_SHELL ${abe_dir}/configure --with-local-snapshots=${user_snapshots} \
      --with-git-reference-dir=/home/tcwg-buildslave/snapshots-ref
fi

if test x"${date}" != x; then
    release="${date}"
else
    echo "MakeRelease.job must be invoked with a --date <release> string."
    exit 1
fi

if test "`echo ${target} | grep -c linux`" -gt 0; then
    if test "`echo ${gcc_src} | grep -c -- '-[56][[:digit:]\.]*'`" -gt 0; then
	libc="--set libc=glibc"
    else
	libc="--set libc=eglibc"
    fi
else
    # ELF and EABI based targets are bare metal only
    libc="--set libc=newlib"
fi

manifest=${manifest:+--manifest ${manifest_src}}
glibc=${glibc_src:+glibc=${glibc_src}}
binutils=${binutils_src:+binutils=${binutils_src}}
gcc=${gcc_src:+gcc=${gcc_src}}
srcs="${gcc} ${binutils} ${glibc} ${manifest}"
logfile=${user_workspace}/MakeRelease-${BUILD_NUMBER}-${arch}.log

# Build a binary release tarball
# Remove logfile if present (for some unknown reason)
rm -f ${logfile}
abe_ret=0
# Canadian cross builds require a Linux hosted cross compiler first
if test x"${canadian}" = x"true"; then
    $CONFIG_SHELL ${abe_dir}/abe.sh ${update} --release ${release} ${srcs} ${platform} --build all ${libc} ${extra} --tarbin >> ${logfile}
    abe_ret=$?
    host="--host i686-w64-mingw32"
else
    host=""
fi

# If we're not building the mingw32 compiler 'abe_ret' will be zero and the
# following conditional will build the linux cross-compiler.  Otherwise it'll
# build the mingw32 compiler only if the previous cross-compiler build was
# successful.
if test ${abe_ret} -eq 0; then
    $CONFIG_SHELL ${abe_dir}/abe.sh ${update} --release ${release} --tarbin ${srcs} ${platform} ${host} --build all ${libc} ${extra} >> ${logfile}
    abe_ret=$?
fi

# MakeRelease.job doesn't require an input gcc_src parameter (it'll invoke ABE
# with the default) so we can't rely on it for the gcc version.  Parse the
# generated manifest file name instead, e.g.,
#    gcc-linaro-6.1.1-2016.08-rc1-linux-manifest.txt
#    gcc-linaro-6.1.1-2016.08-rc1-win32-manifest.txt
manifest_match="*-manifest.txt"

# Read the found manifests into an array.
read -a manifests <<<`find ${user_workspace} -name "${manifest_match}"`

# Make sure we have at least one manifest file found.
if test -z "${manifests[0]}"; then
    echo "Couldn't find a manifest file for the recent build."
    exit 1
fi

# Major.Minor.Point
gcc_full_version=`basename ${manifests[0]} | awk -F '-' '{ print $3 }'`

# Before GCC 5 the GCC release name was Major.Minor.  With GCC 5 and later
# the GCC release name is Major only.
gcc_release="`echo $gcc_full_version | awk -F '.' '{ print $1 }'`"
if test ${gcc_release} -lt 5; then
    gcc_minor="`echo $gcc_full_version | awk -F '.' '{ print $2 }'`"
    gcc_release="${gcc_release}.${gcc_minor}"
fi

# Strip off everything but the DATE[-SPIN][-RC], complicated by the fact
# that the spin and rc are both optional and not mutually exclusive.
series_date=${manifests[0]##*-${gcc_full_version}-}
series_date=${series_date%${manifest_match}}

# We aren't sure if we're getting the linux or win32 manifest so strip both.
series_date=${series_date%-linux}
series_date=${series_date%-win32}

# Fileserver location of binary tarballs and build logfiles
buildid=`printf '%04d' ${BUILD_NUMBER}`
binaries="/work/space/binaries/${gcc_release}-${series_date}-${buildid}/${target}"
logs="/work/space/logs/${gcc_release}-${series_date}-${buildid}/${target}"

# Copy the build log to the fileserver
if test -e ${logfile}; then
    echo "Compressing log file..."
    xz ${logfile}
    ssh ${fileserver} "if test ! -d ${logs}; then mkdir -p ${logs}; fi"
    echo "Copying compressed log file ${logfile}.xz to ${fileserver}:${logs}..."
    scp ${logfile}.xz ${fileserver}:${logs}/
fi

# force a failure if abe has build problems.
if test ${abe_ret} -ne 0; then
  exit 1
fi

# Copy the binary test results to the fileserver
ssh ${fileserver} "if test ! -d ${binaries}; then mkdir -p ${binaries}; fi"

# There could be a linux and/or a win32 manifest.
for manifest in "${manifests[@]}"
do
    scp ${manifest} ${fileserver}:${binaries}/
done

tarballs="`find ${user_snapshots} -name \*${release}\*.xz -o -name \*${release}\*.asc`"
scp ${tarballs} ${fileserver}:${binaries}/

echo "Starting manifest validation."
git clone --depth 1 git://git.linaro.org/toolchain/abe-tests.git
for manifest in "${manifests[@]}"; do
    ./abe-tests/validate-manifest.pl "${manifest}"
    if test $? -ne 0; then
       echo "Manifest validation failed."
       exit 1
    else
       echo "Manifest validation passed."
    fi
done

exit 0
