#!/bin/bash

set -x
set -e
set -u
set -o pipefail

#Belt-and-braces - we do most work in maindir,
#which has 700 permissions, but this protects
#us against world-readable temporaries
umask 077

benchgccpath=
targets=(${targets})
tmpdir="`mktemp -dt downloads-XXXXXXX`"

trap "rm -rf ${tmpdir}" EXIT

#A little parameter checking
if test x"${toolchain:-}" = x; then
  echo "No toolchain given to Benchmark job" 1>&2
  exit 1
fi
if test x"${benchmark:-}" = x; then
  echo "No benchmark given to Benchmark job" 1>&2
  exit 1
fi

function get_thing {
  local thing="$1"
  pushd "${tmpdir}" > /dev/null
  if echo x"${thing}" | grep -q '^xhttp'; then
    wget -q "${thing}"
  else
    local server="${thing%%:*}"
    thing="${thing#*:}"
    (. "${maindir}"/host.conf && topdir="${abe_path}" && . "${topdir}"/lib/common.sh && remote_download "${server}" "${thing}" .)
    if ! test -e "`basename ${thing}`"; then #TODO HACK set -e fails to apply to above incantation
      echo "Download of ${server}:${thing} failed" >&2
      exit 1
    fi
  fi
  popd > /dev/null
  echo "${tmpdir}/`basename ${thing}`"
}

#Set up maindir
echo "Building benchmark ${benchmark} in ${maindir}"
chmod 700 "${maindir}"
cd "${maindir}"
maindir="`pwd`"

#Configure
#Must have run configure before first call to get_thing
echo "${ABE_DIR}"/configure --with-fileserver=148.251.136.42 --with-remote-snapshots=/snapshots-ref
     "${ABE_DIR}"/configure --with-fileserver=148.251.136.42 --with-remote-snapshots=/snapshots-ref

#Install toolchain and build benchmark, or download prebuilt tarball
if test x"${prebuilt:-}" = x; then
  mkdir bin
  if test x"${toolchain:0:1}" = x/; then
    echo "Toolchain assumed to be path on builder"
    benchgccpath="${toolchain}"
  else
    tarball="`get_thing ${toolchain}`"
    tar xf "${tarball}" -C bin
    benchgccpath="`ls ${PWD}/bin/*/bin/*gcc`"
    rm "${tarball}"
  fi

  if test "`echo ${benchgccpath} | wc -w`" -ne 1; then
    echo "Should be exactly one GCC path" 1>&2
    echo "Got: ${benchgccpath}" 1>&2
    exit 1
  fi
  if test x"${benchgccpath}" != x; then
    if ! test -x "${benchgccpath}"; then
      echo "GCC binary '${benchgccpath}' does not exist or is not executable" 1>&2
      exit 1
    fi
  fi
 
  echo "${ABE_DIR}"/scripts/benchmark.sh -s buildonly ${compiler_flags:+-f \"${compiler_flags//\"/\\\"}\"} ${make_flags:+-m \"${make_flags}\"} ${benchgccpath:+-i \"${benchgccpath}\"} -b \"${benchmark}\" "${targets[@]}"
       "${ABE_DIR}"/scripts/benchmark.sh -s buildonly ${compiler_flags:+-f  "${compiler_flags//\"/\\\"}"}  ${make_flags:+-m  "${make_flags}"}  ${benchgccpath:+-i  "${benchgccpath}"}  -b  "${benchmark}"  "${targets[@]}"
else
  benchtar="`get_thing ${prebuilt}`"
fi

#Post-build command
${post_build_cmd:-}

#Run
if test x"${BENCH_DEBUG:-}" = x; then
  politeness='-p'
else
  politeness=
fi
if test x"${prebuilt:-}" = x; then
  echo "${ABE_DIR}"/scripts/benchmark.sh -s runonly ${politeness:-} ${post_target_cmd:+-e \"${post_target_cmd}\"} ${run_flags:+-a \"${run_flags//\"/\\\"}\"} ${benchgccpath:+-i \"${benchgccpath}\"} -b \"${benchmark}\" "${targets[@]}"
       "${ABE_DIR}"/scripts/benchmark.sh -s runonly ${politeness:-} ${post_target_cmd:+-e  "${post_target_cmd}"}  ${run_flags:+-a  "${run_flags//\"/\\\"}"}  ${benchgccpath:+-i  "${benchgccpath}"}  -b  "${benchmark}"  "${targets[@]}"
else
  for target in "${targets[@]}"; do
    echo  "${ABE_DIR}"/scripts/runbenchmark.sh ${politeness:-} ${post_target_cmd:+-e \"${post_target_cmd}\"} ${run_flags:+-a \"${run_flags//\"/\\\"}\"} -b \"${benchmark}\" -d \"${target}\" -t "${benchtar}" -c
    (if ! "${ABE_DIR}"/scripts/runbenchmark.sh ${politeness:-} ${post_target_cmd:+-e  "${post_target_cmd}"}  ${run_flags:+-a  "${run_flags//\"/\\\"}"}  -b  "${benchmark}"  -d  "${target}"  -t "${benchtar}" -c; then
       touch "${tmpdir}"/ERROR
     fi)&
  done
  wait
  if test -e "${tmpdir}"/ERROR; then
    echo "At least one benchmark failed"
    exit 1
  fi
fi
