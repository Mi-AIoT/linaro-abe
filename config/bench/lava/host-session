#!/bin/bash
set -u
set -o pipefail

error=1

function exitfunc {
  if test ${error} -ne 0; then
    if test x"${BENCH_DEBUG}" != x && test x"${BENCH_DEBUG}" != xNone; then
      sleep infinity
    fi
  fi
  rm -rf ~/*
  exit ${error}
}

trap exitfunc EXIT

abe_branch="$1"

#these parameters used by Benchmark.job
export benchmark="${2:?Must set a benchmark}"
export toolchain="${3:?Must set a toolchain}"
if test x"$4" = xNone; then
  export run_flags=
else
  export run_flags="$4"
fi
if test x"$5" = xNone; then
  export compiler_flags=
else
  export compiler_flags="$5"
fi

#Create directory to store src
if ! (mkdir ~/benchsrc && chmod 700 ~/benchsrc); then
  echo "Failed to create directory for source" >&2
  exit 1
fi

#Initialize git-new-workdir - sadly not just an apt-get call
ln /usr/share/doc/git/contrib/workdir/git-new-workdir /usr/local/bin
chmod 755 /usr/local/bin/git-new-workdir

#Get abe
export ABE_DIR=~/src/abe
mkdir -p "${ABE_DIR}" || exit 1
if ! git clone ${abe_branch:+-b ${abe_branch}} http://git.linaro.org/toolchain/abe "${ABE_DIR}"; then
  rm -rf "${ABE_DIR}"
  exit 1
fi

#Generate one-time key
mkdir ~/data || exit 1
if ! ssh-keygen -P '' -f ~/data/onetime > /dev/null < /dev/null; then
  rm -rf ~/data
  exit 1
fi
eval `ssh-agent`
ssh-add ~/data/onetime

#Need to be able to ssh to self to get local sources
#Can reuse the onetime key for this
cat ~/data/onetime.pub >> ~/.ssh/authorized_keys
if ! ssh -o NoHostAuthenticationForLocalhost=yes localhost true; then
  echo "Failed to ssh to self" >&2
  exit 1
fi

#Generate config file for each target in multinode job
lava-network broadcast eth0
lava-network collect eth0
ip_addr="$(lava-network query `lava-group | grep '[[:blank:]]\+host$' | awk '{print $1}'` ipv4)"

#Request agent just before we need it
#This would be two keys in one agent if we wanted one for source, one for job
echo "*** WAITING FOR AGENT: ${ip_addr}"
echo "ssh -o ControlMaster=no -o ControlPath=/dev/null -A ${ip_addr}.lab 'ln -sf \$SSH_AUTH_SOCK /root/data/socket && while test -e ~/data/socket; do inotifywait -e delete ~/data; done'"
while ! test -e ~/data/socket; do
  inotifywait -e create ~/data
done
#Best practice would be to use abe to do this, but I hope this is temporary
SSH_AUTH_SOCK=~/data/socket git clone "`grep ${benchmark} ${ABE_DIR}/config/sources.conf | awk '{print $2}'`" ~/benchsrc/${benchmark} || exit 1
#An alternative to the following would be to pass ${benchmark}=ssh://... to abe.sh
sed -i "s#^\\(${benchmark}[[:blank:]]\\+\\).*#\\1 ssh://localhost/~/benchsrc/#" "${ABE_DIR}"/config/sources.conf || exit 1

target_names=()
for lava_name in `lava-group | grep -v '[[:blank:]]*host$' | awk '{print $1}'`; do
  target_ip="$(lava-network query ${lava_name} ipv4)"
  if test $? -ne 0; then echo "Failed to find IP for ${lava_name}"; exit 1; fi
  if test -z "${target_ip}"; then echo "Failed to find IP for ${lava_name}"; exit 1; fi

  #Check that target is accessible, add it to our known_hosts,
  #add our one-time key to its authorized_keys
  if ! cat ~/data/onetime.pub | SSH_AUTH_SOCK=~/data/socket ssh -o StrictHostKeyChecking=no "${target_ip}" "cat - >> ~/.ssh/authorized_keys"; then
    echo "Could not access target ${target_ip} (${lava_name})" >&2
    exit 1
  fi

  #Generate configuration files for target
  target_type="$(echo ${lava_name} | sed 's/[[:digit:]]*$//')" #TODO: HACK
  if test $? -ne 0; then echo "Failed to find target type from ${lava_name}"; exit 1; fi
  sed "s/^ip=.*/ip=${target_ip}/" "${ABE_DIR}/config/bench/boards/${target_type}.conf" > "${ABE_DIR}/config/bench/boards/${lava_name}.conf"
  if test $? -ne 0; then echo "Failed to generate config file for target ${lava_name}"; exit 1; fi

  cp "${ABE_DIR}/config/bench/boards/${target_type}.services" "${ABE_DIR}/config/bench/boards/${lava_name}.services"
  if test $? -ne 0; then echo "Failed to generate services file for target ${lava_name}"; exit 1; fi

  #Add target to list for Benchmark.job
  if test "${#target_names[@]}" -eq 0; then
    target_names=("${lava_name}")
  else
    target_names=("${target_names[@]}" "${lava_name}")
  fi
done

#Don't need the agent any more, kill the socket
rm ~/data/socket

export targets="${target_names[@]}"
export maindir="/${HOME}/bench"
export post_target_cmd="shutdown -h 0"
mkdir "${maindir}"
chmod 700 "${maindir}"

echo "Running benchmark... I may be some time"
if ! "${ABE_DIR}"/scripts/Benchmark.job; then
  echo "Benchmark run failed" >&2
  echo "ssh -o ControlMaster=no -o ControlPath=/dev/null ${ip_addr}.lab"
  error=1
  exit
fi

echo "*** RESULTS READY"
echo "ssh -o ControlMaster=no -o ControlPath=/dev/null ${ip_addr}.lab"
echo "ssh -o ControlMaster=no -o ControlPath=/dev/null ${ip_addr}.lab 'touch ~/data/resultsgone'"
while ! test -e ~/data/resultsgone; do
  inotifywait -e create ~/data
done

error=0
exit
