# This is a list of other components need to build this component
depends="gmp mpfr mpc linux binutils"

# This is a file that gets installed that is used to determine if the toolchain
# component is already installed.
installs="gcc"

# The current branch of the existing GCC release.
latest="gcc.git~linaro-4.8-branch"
# The current HEAD in the master branch, which will become the next release.
#latest="gcc.git"
# The branch for the previous official GCC release
#latest="gcc.git~bzr/linaro-4.7-branch"

# If yes, only static linking will be used
static_link="no"

# This is a list of default flags always supplied to configure
default_configure_flags="--with-bugurl=https://bugs.launchpad.net/gcc-linaro --with-mpc=${local_builds}/destdir/${host} --with-mpfr=${local_builds}/destdir/${host} --with-gmp=${local_builds}/destdir/${host} --with-gnu-as --with-gnu-ld  --disable-libstdcxx-pch --disable-libmudflap"

# --with-pkgversion=${USER} 
# --with-as=${local_builds}/bin/${target}-as --with-ld=${local_builds}/bin/${target}-ld 

# Disable the Graphite loop optimizer as it's being depreciated
default_configure_flags="${default_configure_flags} --with-cloog=no --with-ppl=no --with-isl=no"

# nls is used for DNS
default_configure_flags="${default_configure_flags} --disable-nls"

# enable multiarch
default_configure_flags="${default_configure_flags} --enable-multiarch"

# libssp does stack protection
#default_configure_flags="${default_configure_flags} --enable-libssp"

# C99 is the latest standard, and has improved numerics support, so we want it
# http://en.wikipedia.org/wiki/C99
default_configure_flags="${default_configure_flags} --enable-c99"

# Used by fortran
# http://gcc.gnu.org/onlinedocs/libquadmath/
# default_configure_flags="${default_configure_flags} --disable-libquadmath"

# Transactional Memory, used for threading
# http://gcc.gnu.org/wiki/TransactionalMemory
#default_configure_flags="${default_configure_flags} --disable-libitm"

# Libatomic is a synchronization library	     
# http://www.hpl.hp.com/research/linux/atomic_ops/
#default_configure_flags="${default_configure_flags} --disable-libatomic"

if test `echo ${target} | grep -c aarch64` -eq 1 -a `echo ${gcc_version} | grep -c gcc-linaro-4\.7` -eq 1; then
   error "GCC 4.7 does not support aarch64!"
   exit 1
fi

# For a cross build, we need the target as part of the name for to find the correct.
# assembler and linker. We also disable bootstrapping for cross builds
if test x"${build}" != x"${target}"; then
   # These next libraries suffer from the dreaded GCC_NO_EXECUTABLES macros for Autoconf,
   # which prevents these from being able to be cross configured.
   gcc_no_executables="" # --disable-libssp
   # stage1_flags are used to build the initial C compiler, which is used to compile
   # the C library. We disable most everything, as the second GCC build will be
   # able to use the C library built with the first GCC build.
   stage1_flags="--disable-libssp --disable-libquadmath --disable-threads  --without-headers --with-newlib --disable-libmudflap --disable-bootstrap --disable-decimal-float --disable-libgomp --disable-libatomic --disable-libsanitizer --disable-plugins --disable-libitm ${gcc_no_executables} --disable-shared --enable-static --enable-languages=c"
   # bootstrapping is handlet by Jenkins now.
   stage2_flags="--disable-bootstrap ${gcc_no_executables} --with-build-sysroot=${sysroots} --enable-lto --enable-linker-build-id  --enable-long-long --enable-plugin --enable-languages=c,c++,fortran,lto --enable-shared=libgcc,libstdc++-v3"
 #  -fno-stack-protector -U_FORTIFY_SOURCE 
   # Add platform specific flags
    case ${target} in
	arm-*linux-gnueabi)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=softfp --with-mode=thumb"
	    need_qemu=yes
	    ;;
	arm-*linux-gnueabihf)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb"
	    need_qemu=yes
	    ;;
	    # bare metal targets don't support threads.
	armeb-*linux-gnueabi)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=softfp --with-mode=thumb --disable-multilib"
	    need_qemu=yes
	    ;;
	armeb-*linux-gnueabihf)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb --disable-multilib"
	    need_qemu=yes
	    ;;
	    # bare metal targets don't support threads.
	arm-*eabi)
	    default_configure_flags="${default_configure_flags} --enable-threads=no "
	    need_qemu=no
	    ;;
	armeb-*eabi)
	    default_configure_flags="${default_configure_flags} --enable-threads=no --disable-multilib"
	    need_qemu=no
	    ;;
	aarch64*-*-elf)
	    default_configure_flags="${default_configure_flags} -with-arch=armv8-a TARGET_LDFLAGS=\'-lc -lrdimon\'"
	    need_qemu=no
	    ;;
	aarch64*-linux-gnu)
	    default_configure_flags="${default_configure_flags} -with-arch=armv8-a"
	    need_qemu=no
	    ;;
	i686*-mingw32)
	    #default_configure_flags="${default_configure_flags}"
	    need_qemu=no
	    ;;
	x86_64*-mingw32)
	    #default_configure_flags="${default_configure_flags}"
	    need_qemu=no
	    ;;
	*)
	    need_qemu=no
	    ;;
    esac
   
    case ${clibrary} in
	eglibc)
	    if test "`echo ${eglibc_version} | grep -c '/'`" -gt 0; then
		libc_version="`echo ${eglibc_version} | cut -d '/' -f 2`"
	    else
		libc_version="${eglibc_version}"
            fi
	    ;;
	glibc)
	    libc_version="${glibc_version}"
	    ;;
	newlib)
	    # bare metal targets don't support threads.
	    default_configure_flags="${default_configure_flags} --disable-threads --with-newlib"
	    libc_version="${newlib_version}"
	    ;;
	*)
	    fixme "\${clibrary} not specified by the time libc_version is being set."
	    ;;
    esac


    # The sysroot path depends on the C library version.
    local tag="sysroot-${libc_version}-${target}"
    # FIXME: Check the sysroot path when the libc_version is bogus.
    default_configure_flags="${default_configure_flags} --with-sysroot=/opt/linaro/${tag}"

# native builds are easy, so build almost everything
else
    default_configure_flags="${default_configure_flags} --enable-linker-build-id --without-included-gettext --enable-threads=posix --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --enable-multiarch --disable-sjlj-exceptions --enable-languages=c,c++,go,objc,fortran"
    # Native compilers are bootstrapped by default, but sometimes the extra time isn't
    # desired.
    if test x"${bootstrap}" = x"yes"; then
	default_configure_flags="${default_configure_flags} --enable-bootstrap" 
    else
	default_configure_flags="${default_configure_flags} --disable-bootstrap" 
    fi
    case ${target} in
	arm*-none-linux-gnueabi)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=softfp --with-thumb "
	    ;;
	arm*-linux-gnueabihf)
	    default_configure_flags="${default_configure_flags} --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-thumb"
	    ;;
	arm*-eabi | aarch64*-*-elf)
	    #default_configure_flags="${default_configure_flags}"
	    ;;
	aarch64*-linux-gnu)
	    #default_configure_flags="${default_configure_flags}"
	    ;;
	x86-pc-linux-gnu)
           default_configure_flags="${default_configure_flags} --enable-linker-build-id --without-included-gettext --enable-threads=posix --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --enable-multiarch --disable-sjlj-exceptions"
	    ;;
	x86_64*-linux-gnu)
	    ;;
	*)
	    ;;
    esac
  	stage2_flags=""
fi	 

# This is a list of default flags always supplied to "make check".
runtest_flags="-a"

