{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02be0737_aea6b11a",
        "filename": "config/binutils.conf",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-05-30T20:11:06Z",
      "side": 1,
      "message": "Are we going to keep ${sysroots}/libc then? Or is it worth trying to get rid of it and installing libc directly in sysroots?\n\nI can work on that if it\u0027s worthwhile. There\u0027s a GDB testcase that fails because of it.",
      "revId": "9bd48bb080dff3a83ec982195daef25c3fb191a2",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8f5569f_34c6dab5",
        "filename": "config/binutils.conf",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000232
      },
      "writtenOn": "2024-06-13T16:25:18Z",
      "side": 1,
      "message": "Without the setting the sysroot a stage2 compiler built with different glibc versions (aiming to test gcc targeting a different libc than the system one), won\u0027t link against the newly build glibc.  It is not an issue, since glibc guarantee future compatibility (and assuming system libc is older than the target one); but it defeats the idea of testing gcc along with a newly libc version.\n\nWhy gdb tests are failing with --sysroot?",
      "parentUuid": "02be0737_aea6b11a",
      "revId": "9bd48bb080dff3a83ec982195daef25c3fb191a2",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73e0dfe3_e225e98f",
        "filename": "config/binutils.conf",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2024-06-14T08:24:53Z",
      "side": 1,
      "message": "How could this work/appear to work so far?",
      "parentUuid": "a8f5569f_34c6dab5",
      "revId": "9bd48bb080dff3a83ec982195daef25c3fb191a2",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ee0c803_b74e6e64",
        "filename": "config/binutils.conf",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-06-15T00:19:54Z",
      "side": 1,
      "message": "The problem is not with --sysroot. That is fine. The problem is with having a separate libc \"sub-sysroot\": ${sysroots}/libc. I think this is a strange setup, and causes problems.\n\nIn GDB it breaks the libstdc++ pretty-printers, because they have to be copied into that ${sysroots}/libc subdirectory from the original ${sysroots} sysroot. The pretty-printers have libstdc++\u0027s installation prefix hard-coded into them and when they are moved somewhere else, they stop working. This caused this false-positive regression report, for example: https://linaro.atlassian.net/browse/GNU-1088\n\nAlso, as I mentioned in the GNU sync meeting once, I came across someone on Stack Overflow who wasn\u0027t able to cross-compile an application because of this subsysroot:\n\n\"It looks like the presence of the libc directory in the sysroot is unusual, and I checked other toolchains and it was always merged with lib. So I ended up ditching that particular toolchain and building my own with crosstool-ng instead. This avoided the problem entirely.\"\n\nhttps://stackoverflow.com/questions/58073824/cross-compiling-and-linking-to-a-library-in-a-sysroot-whats-wrong",
      "parentUuid": "73e0dfe3_e225e98f",
      "revId": "9bd48bb080dff3a83ec982195daef25c3fb191a2",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6536a26_d51428d1",
        "filename": "config/binutils.conf",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2024-09-13T00:45:08Z",
      "side": 1,
      "message": "First of all, I\u0027m all for dropping arcane sysroot setups that we historically have.\n\nRe. $sysroots/lib vs $sysroots/libc -- I believe the motivation was to have \"libc\" directly copiable to the target system and have the minimum required amount of files to make the binaries run.  I.e., libc/ doesn\u0027t include static libraries.  Saving space on embedded systems was important back in the day.\n\nNowadays, I don\u0027t think we should bother to separate static and dynamic sysroots.  If we easily can do that -- great; if not -- let\u0027s drop it for the sake of simplicity.",
      "parentUuid": "3ee0c803_b74e6e64",
      "revId": "9bd48bb080dff3a83ec982195daef25c3fb191a2",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    }
  ]
}