{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6a9295d7_92793829",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000532
      },
      "writtenOn": "2023-04-12T12:05:17Z",
      "side": 1,
      "message": "Sounds ok to me, beside the failed abe check.",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9cdc12f_e4f6ef0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-04-12T12:45:49Z",
      "side": 1,
      "message": "Looking at ABE failures, I noticed that \"cross-build\" fails because:\n/home/tcwg-buildslave/workspace/tcwg-abe-test__0/snapshots/gcc.git~releases~gcc-12/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp:157:10: fatal error: crypt.h: No such file or directory\n  157 | #include \u003ccrypt.h\u003e\n\n",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "809e10a9_c23ed567",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-12T14:54:49Z",
      "side": 1,
      "message": "We are in catch-22 situation here.  Without glibc\u0027s libcrypt we can\u0027t cross-build sanitizers (native build can work, though, since we can link against system libxcrypt).\nWith glibc\u0027s libcrypt we can build sanitizers, but cross-testing will fail due to sudo/ssh/etc. failing to find XCRYPT_2.0 version.",
      "parentUuid": "e9cdc12f_e4f6ef0a",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d4c8ae6_2f70ddbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2023-04-12T15:52:01Z",
      "side": 1,
      "message": "\u003e We are in catch-22 situation here.  Without glibc\u0027s libcrypt we can\u0027t cross-build sanitizers (native build can work, though, since we can link against system libxcrypt).\n\u003e With glibc\u0027s libcrypt we can build sanitizers, but cross-testing will fail due to sudo/ssh/etc. failing to find XCRYPT_2.0 version.\n\nWould it solve the catch-22 if we installed libcrypt-dev:arm64 in the CI container? I have it in my laptop so it\u0027s possible.",
      "parentUuid": "809e10a9_c23ed567",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0bc2fab_7a88bb22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2023-04-12T15:52:01Z",
      "side": 1,
      "message": "Looks good to me! Just some minor nits.",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "819bce8d_775ead6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000072
      },
      "writtenOn": "2023-04-13T08:05:39Z",
      "side": 1,
      "message": "Maybe we can also switch to qemu to test cross-toolchains?",
      "parentUuid": "5d4c8ae6_2f70ddbf",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ae63fcb_b4c9f3e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-13T09:17:04Z",
      "side": 1,
      "message": "Yes, that\u0027s a possible solution:\n1. install libcrypt:arm64 and libcrypt-dev:arm64 in x86_64 docker images,\n2. point ABE cross-builds to include /usr/lib/$target sysroot to find libcrypt.\n\nAnother possible solution is have ABE build glibc\u0027s libcrypt and link sanitizers against it. Then, when rsync\u0027ing new sysroot to the test container, exclude glibc\u0027s libcrypt and hope that ubuntu\u0027s libcrypt has all the right symbols and versions for tests to work.",
      "parentUuid": "5d4c8ae6_2f70ddbf",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bd1ca03_1c0a4538",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-13T09:18:08Z",
      "side": 1,
      "message": "I have posted a workaround to remove \"libcrypt\" from test sysroot: https://review.linaro.org/c/toolchain/abe/+/43699/",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dffbdb6_4f93e512",
        "filename": "lib/make.sh",
        "patchSetId": 2
      },
      "lineNbr": 618,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2023-04-12T15:52:01Z",
      "side": 1,
      "message": "Small nit. Document new function argument here.",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53f46baa_af4ee2bf",
        "filename": "lib/make.sh",
        "patchSetId": 2
      },
      "lineNbr": 618,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-13T09:17:04Z",
      "side": 1,
      "message": "Good catch, thanks!",
      "parentUuid": "4dffbdb6_4f93e512",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6b33f2_035bd3e7",
        "filename": "lib/make.sh",
        "patchSetId": 2
      },
      "lineNbr": 618,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-13T09:40:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53f46baa_af4ee2bf",
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0549518_fede7b36",
        "filename": "lib/make.sh",
        "patchSetId": 2
      },
      "lineNbr": 690,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2023-04-12T15:52:01Z",
      "side": 1,
      "message": "ShellCheck warns about the variables in the here document being expanded on the client rather than on the server side because EOF isn\u0027t quoted.\nThis is what we want though, so I suggest disabling the warning with:\n\n# shellcheck disable\u003dSC2087",
      "range": {
        "startLine": 690,
        "startChar": 66,
        "endLine": 690,
        "endChar": 69
      },
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "237108d8_702bc024",
        "filename": "lib/make.sh",
        "patchSetId": 2
      },
      "lineNbr": 690,
      "author": {
        "id": 1000092
      },
      "writtenOn": "2023-04-13T09:40:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0549518_fede7b36",
      "range": {
        "startLine": 690,
        "startChar": 66,
        "endLine": 690,
        "endChar": 69
      },
      "revId": "41b62035ca1f87bd8759341b791215c6d25ba41d",
      "serverId": "f33910f19b7abb192b83adbd000000bf"
    }
  ]
}